CX51 COMPILER V9.00   MAIN                                                                 10/29/2016 11:50:42 PAGE 1   


CX51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN D:\devolop\c\printg\printg\main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil4\C51\BIN\CX51.exe D:\devolop\c\printg\printg\main.c

line level    source

   1          #include <stdio.h>
   2          #include <stdlib.h>
   3          #include <string.h>
   4          #include <reg52.h>
   5          #include <intrins.h>
   6          
   7          typedef unsigned char uchar;
   8          typedef unsigned int uint;
   9          
  10          #define LED P2
  11          
  12          sbit s_add = P1 ^ 0;
  13          sbit s_sub = P1 ^ 1;
  14          sbit s_cls = P1 ^ 2;
  15          sbit s_wei = P1 ^ 6;
  16          sbit s_dua = P1 ^ 7;
  17          
  18          uchar code pDua[] = {
  19                  0xC0, 0xF9, 0xA4, 0xB0, 0x99,
  20                  0x92, 0x82, 0xF8, 0x80, 0x90
  21          };
  22          
  23          uchar code pWei[] = {
  24                  0x01, 0x02, 0x04, 0x08,
  25                  0x10, 0x20, 0x40, 0x80
  26          };
  27          
  28          void delayus(uint x)
  29          {
  30   1              uint i = 0;
  31   1      
  32   1              for (i = 0; i < x; i++)
  33   1              {
  34   2                      _nop_();
  35   2              }
  36   1      }
  37          
  38          void delayms(uint x)
  39          {
  40   1              int i = 0;
  41   1              while (x--)
  42   1              {
  43   2                      for (i = 100; i > 0; i--);
  44   2              }
  45   1      }
  46          
  47          int KeyScan()
  48          {
  49   1              int key = 0;
  50   1      
  51   1              if (0 == s_add)
  52   1              {
  53   2                      delayms(5);
  54   2                      if (0 == s_add)
  55   2                      {
CX51 COMPILER V9.00   MAIN                                                                 10/29/2016 11:50:42 PAGE 2   

  56   3                              key = 1;
  57   3                              while (0 == s_add);
  58   3                      }
  59   2              }
  60   1              else if (0 == s_sub)
  61   1              {
  62   2                      delayms(5);
  63   2                      if (0 == s_sub)
  64   2                      {
  65   3                              key = 2;
  66   3                              while (0 == s_sub);
  67   3                      }
  68   2              }
  69   1              else if (0 == s_cls)
  70   1              {
  71   2                      delayms(5);
  72   2                      if (0 == s_cls)
  73   2                      {
  74   3                              key = 3;
  75   3                              while (0 == s_cls);
  76   3                      }
  77   2              }
  78   1              return key;
  79   1      }
  80          
  81          void nums_to_num(int *led_value/*in*/, int **pValue/*out*/, int *len/*out*/)
  82          {
  83   1              int tmp = 0;
  84   1              int *p = NULL;
  85   1              int i = 0;
  86   1      
  87   1              tmp = *led_value;
  88   1      
  89   1              for (i = 0; tmp; i++)
  90   1              {
  91   2                      tmp = tmp / 10;
  92   2              }
  93   1              *len = i;
  94   1              p = (int *)malloc(sizeof(*p) * i);
  95   1              if (NULL == p)
  96   1              {
  97   2                      return;
  98   2              }
  99   1              memset(p, 0, sizeof(*p) * i);
 100   1              tmp = *led_value;
 101   1              do
 102   1              {
 103   2                      p[i - 1] = tmp % 10;
 104   2                      i--;
 105   2                      tmp /= 10;
 106   2              } while (tmp);
 107   1      
 108   1              *pValue = p;
 109   1      }
 110          
 111          void display(int key/*in*/, int *led_value/*out*/, int *len/*out*/, int **pValue/*out*/)
 112          {
 113   1              int nValue = 0;
 114   1              nValue = *led_value;
 115   1              if (0 == key)
 116   1              {
 117   2                      return;
CX51 COMPILER V9.00   MAIN                                                                 10/29/2016 11:50:42 PAGE 3   

 118   2              }
 119   1              else if (1 == key)
 120   1              {
 121   2                      nValue++;
 122   2              }
 123   1              else if (2 == key)
 124   1              {
 125   2                      nValue--;
 126   2              }
 127   1              else if (3 == key)
 128   1              {
 129   2                      nValue = 0;
 130   2              }
 131   1              nums_to_num(&nValue, pValue, len);
 132   1              *led_value = nValue;
 133   1      }
 134          
 135          int main(void)
 136          {
 137   1              int i = 0;
 138   1              int key = 0;
 139   1              int led_value = 0;
 140   1              int len = 0;
 141   1              int *pValue = NULL;
 142   1              while (1)
 143   1              {
 144   2                      LED = pWei[0];
 145   2                      s_wei = 1;
 146   2                      s_wei = 0;
 147   2                      LED = pDua[0];
 148   2                      s_dua = 1;
 149   2                      s_dua = 0;
 150   2              }
 151   1              return 0;
 152   1      }
 153          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    517    ----
   CONSTANT SIZE    =     18    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      40
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


CX51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
